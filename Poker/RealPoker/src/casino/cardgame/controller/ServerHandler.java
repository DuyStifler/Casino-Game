//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : casino project
//  @ File Name : ServerHandler.java
//  @ Date : 5/27/2012
//  @ Author : sangdn
//  @ Description: ServerHandler is used to :
//              + Convert ISFSEvent to SFSGameEvent
//              + Decide which ServerController Is Used And Pass SFSGameEvent to that Server  
//



package casino.cardgame.controller;

import casino.cardgame.controller.server.TestedController;
import casino.cardgame.controller.server.IServerController;
import casino.cardgame.controller.server.StopController;
import casino.cardgame.controller.server.PendingController;
import casino.cardgame.controller.server.RunningController;
import casino.cardgame.game_enum.ServerState;
import casino.cardgame.message.event.Login;
import casino.cardgame.message.event.Logout;
import casino.cardgame.message.event.PlayerToSpectator;
import casino.cardgame.message.event.PrivateMessage;
import casino.cardgame.message.event.PublicMessage;
import casino.cardgame.message.event.RoomAdded;
import casino.cardgame.message.event.RoomRemove;
import casino.cardgame.message.event.RoomVariableUpdate;
import casino.cardgame.message.event.SFSGameEvent;
import casino.cardgame.message.event.ServerReady;
import casino.cardgame.message.event.SpectatorToPlayer;
import casino.cardgame.message.event.UserDisconnect;
import casino.cardgame.message.event.UserExitRoom;
import casino.cardgame.message.event.UserJoinRoom;
import casino.cardgame.message.event.UserJoinZone;
import casino.cardgame.message.event.UserVariableUpdate;
import casino.cardgame.message.request.SFSGameRequest;
import casino.cardgame.message.request.game.ConfirmReadyGameRequest;
import casino.cardgame.utils.GlobalValue;
import casino.cardgame.utils.Logger;
import com.smartfoxserver.v2.core.ISFSEvent;
import com.smartfoxserver.v2.exceptions.SFSLoginException;
import javax.security.auth.login.LoginException;


public class ServerHandler {
	private ServerState CURRENT_STATE;
	protected IServerController m_serverController;
        protected StopController m_stopController;
        protected RunningController m_runningController;
        protected PendingController m_pendingController;
        protected TestedController m_testedController;
        
        private static ServerHandler m_instance;
        protected ServerHandler(){
            CURRENT_STATE = ServerState.TESTING;
            m_stopController = StopController.getInstance();
            m_runningController = RunningController.getInstance();
            m_pendingController = PendingController.getInstance();
            m_testedController = TestedController.getInstance();
            m_serverController = m_testedController;
            
        }
        public static ServerHandler getInstance(){
            try{
                if(m_instance == null){
                    m_instance = new ServerHandler();
                }
                return m_instance;
            }catch(Exception ex){
                Logger.trace("[ServerHandle][getInstance] " + ex);
            }
            return null;
        }
        
        
	public void HandleGameMessage(SFSGameRequest sfsreq) {
            try{
                m_serverController.HandleGameMessage(sfsreq);
            }catch(Exception ex){
                Logger.error(this.getClass(),ex);
            }
	}
	
        public void HandleAdminMessage(SFSGameRequest sfsreq) {
            try{
                m_serverController.HandleAdminMessage(sfsreq);
            }catch(Exception ex){
                Logger.error(this.getClass(),ex);
            }
	}
	public void HandleUserVariableUpdate(ISFSEvent isfse) {
            try{
                SFSGameEvent evt = new UserVariableUpdate().FromSFSEvent(isfse);
                m_serverController.HandleUserVariableUpdate(evt);
            }catch(Exception ex){
                Logger.error(this.getClass(),ex);
            }
	}
	
	public void HandleUserLogout(ISFSEvent isfse) {
            try{
                SFSGameEvent evt = new Logout().FromSFSEvent(isfse);
                m_serverController.HandleUserLogOut(evt);
            }catch(Exception ex){
                Logger.error(this.getClass(),ex);
            }
	}
	
	public void HandleUserLeaveRoom(ISFSEvent isfse) {
            try{
                SFSGameEvent evt = new UserExitRoom().FromSFSEvent(isfse);
                m_serverController.HandleUserLeaveRoom(evt);
            }catch(Exception ex){
                Logger.error(this.getClass(),ex);
            }
	}
	
	public void HandleUserJoinRoom(ISFSEvent isfse) {
            try{
               SFSGameEvent evt = new UserJoinRoom().FromSFSEvent(isfse);
                m_serverController.HandleUserJoinRoom(evt); 
            }catch(Exception ex){
                Logger.error(this.getClass(),ex);
            }
	}
	
	public void HandleUserDisconnect(ISFSEvent isfse) {
            try{
                SFSGameEvent evt = new UserDisconnect().FromSFSEvent(isfse);
                m_serverController.HandleUserDisconect(evt);
            }catch(Exception ex){
                Logger.error(this.getClass(),ex);
            }
	}
	
	public void HandleServerReady(ISFSEvent isfse) {
            try{
                SFSGameEvent evt = new ServerReady().FromSFSEvent(isfse);
                //Create room for testing
                if(CURRENT_STATE == ServerState.TESTING){
                    m_testedController.HandleServerReady(evt);
                }
                        
            }catch(Exception ex){
                Logger.error(this.getClass(),ex);
            }
	}
	
	public void HandleRoomVariableUpdate(ISFSEvent isfse) {
            try{
                SFSGameEvent evt = new RoomVariableUpdate().FromSFSEvent(isfse);
                m_serverController.HandleRoomVariableUpdate(evt);
            }catch(Exception ex){
                Logger.error(this.getClass(),ex);
            }
	}
	
	public void HandleRoomRemoved(ISFSEvent isfse) {
            try{
                SFSGameEvent evt = new RoomRemove().FromSFSEvent(isfse);
                m_serverController.HandleRoomRemove(evt);
            }catch(Exception ex){
                Logger.error(this.getClass(),ex);
            }
	}
	
	public void HandleRoomAdded(ISFSEvent isfse) {
            try{
                SFSGameEvent evt = new RoomAdded().FromSFSEvent(isfse);
                m_serverController.HandleRoomAdded(evt);
            }catch(Exception ex){
                Logger.error(this.getClass(),ex);
            }
	}
	
	public void HandlePublicMessage(ISFSEvent isfse) {
            try{
                SFSGameEvent evt = new PublicMessage().FromSFSEvent(isfse);
                m_serverController.HandlePublicMessage(evt);
            }catch(Exception ex){
                Logger.error(this.getClass(),ex);
            }
	}
	
	public void HandlePrivateMessage(ISFSEvent isfse) {
            try{
                SFSGameEvent evt = new PrivateMessage().FromSFSEvent(isfse);
                m_serverController.HandlePrivateMessage(evt);
            }catch(Exception ex){
                Logger.error(this.getClass(),ex);
            }
	}
	
	public void HandleSpecToPlayer(ISFSEvent isfse) {
            try{
                SFSGameEvent evt = new SpectatorToPlayer().FromSFSEvent(isfse);
                m_serverController.HandleSpectatorToPlayer(evt);
            }catch(Exception ex){
                Logger.error(this.getClass(),ex);
            }
	}
	
	public void HandlePlayerToSpectator(ISFSEvent isfse) {
            try{
                SFSGameEvent evt = new PlayerToSpectator().FromSFSEvent(isfse);
                m_serverController.HandlePlayerToSpectator(evt);
            }catch(Exception ex){
                Logger.error(this.getClass(),ex);
            }
	}
	//SangDN: 
        //UserLogin Would Never catch SFSLoginException
	public void HandleUserLogin(ISFSEvent isfse) throws SFSLoginException {
            SFSGameEvent loginEvt = new Login().FromSFSEvent(isfse);
            m_serverController.HandleUserLogin(loginEvt);
	}

    public void HandleUserJoinZone(ISFSEvent isfse) {
        try{
            SFSGameEvent joinZoneEvt = new UserJoinZone().FromSFSEvent(isfse);
            m_serverController.HandleUserJoinZone(joinZoneEvt);
        }catch(Exception ex){
            Logger.error(this.getClass(),ex);
        }
    }

    /**
     * @return the CURRENT_STATE
     */
    public ServerState getCURRENT_STATE() {
        return CURRENT_STATE;
    }

    /**
     * @param CURRENT_STATE the CURRENT_STATE to set
     */
    public void setCURRENT_STATE(ServerState CURRENT_STATE) {
        this.CURRENT_STATE = CURRENT_STATE;
    }
}

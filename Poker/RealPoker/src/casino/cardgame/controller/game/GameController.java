//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : casino project
//  @ File Name : GameController.java
//  @ Date : 5/27/2012
//  @ Author : sangdn
//
//
package casino.cardgame.controller.game;

import casino.cardgame.controller.game.table.PokerController;
import casino.cardgame.controller.game.table.PokerTournamentController;
import casino.cardgame.controller.game.table.TaLaController;
import casino.cardgame.controller.game.table.TableController;
import casino.cardgame.entity.RoomInfo;
import casino.cardgame.entity.game.TournamentEntity;
import casino.cardgame.entity.game_entity.poker_tournament.PokerTournamentInfo;
import casino.cardgame.game_enum.RoomInfoParams;
import casino.cardgame.game_enum.RoomStatus;
import casino.cardgame.game_enum.RoomVariableDetail;
import casino.cardgame.game_enum.TournamentInfoParams;
import casino.cardgame.message.event.*;
import casino.cardgame.message.reponse.GAME_RESPONSE_NAME;
import casino.cardgame.message.reponse.admin.ADMIN_RESPONSE_TYPE;
import casino.cardgame.message.reponse.game.*;
import casino.cardgame.message.reponse.game.pokreTournament.GetListTournamentRes;
import casino.cardgame.message.reponse.game.pokreTournament.POKER_TOUR_RESPONSE_NAME;
import casino.cardgame.message.request.GAME_REQUEST_NAME;
import casino.cardgame.message.request.game.InvitationReplyRequest;
import casino.cardgame.message.request.game.InvitationRequest;
import casino.cardgame.message.request.SFSGameRequest;
import casino.cardgame.message.request.game.GetTransactionByUserRequest;
import casino.cardgame.message.request.game.pokerTournament.*;
import casino.cardgame.utils.GlobalValue;
import casino.cardgame.utils.Logger;
import com.smartfoxserver.v2.entities.Room;
import com.smartfoxserver.v2.entities.User;
import com.smartfoxserver.v2.entities.data.ISFSArray;
import com.smartfoxserver.v2.entities.data.ISFSObject;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

public class GameController implements IGameController {

    HashMap<String, TableController> m_mapTableController;
    private HashMap<String, IGameController> m_mapTournamentController;
    protected static GameController m_instance;

    protected GameController() {
        m_mapTableController = new HashMap<String, TableController>();
        m_mapTournamentController = new HashMap<String, IGameController>();

        Logger.trace("Init Game Controller");

//        createTempTournament();
//        createRoom();
    }

//    protected void createTempTournament() {
//        Logger.trace("create tour");
//        PokerTournamentController tournament1 = new PokerTournamentController();
//        tournament1.setTournamentInfo(new PokerTournamentInfo("SitnGo1", 100.0, 4, 500, 500, 50, 30, 20));
//        m_mapTournamentController.put("SitnGo1", tournament1);
//        PokerTournamentController tournament2 = new PokerTournamentController();
//        tournament2.setTournamentInfo(new PokerTournamentInfo("SitnGo2", 100.0, 4, 500, 500, 50, 30, 20));
//        m_mapTournamentController.put("SitnGo2", tournament2);
//        PokerTournamentController tournament3 = new PokerTournamentController();
//        tournament3.setTournamentInfo(new PokerTournamentInfo("SitnGo3", 100.0, 3, 500, 500, 50, 30, 20));
//        m_mapTournamentController.put("SitnGo3", tournament3);
//        PokerTournamentController tournament4 = new PokerTournamentController();
//        tournament4.setTournamentInfo(new PokerTournamentInfo("SitnGo4", 100.0, 3, 500, 500, 50, 30, 20));
//        m_mapTournamentController.put("SitnGo4", tournament4);
//    }
    protected void ProcessRoomAdded(Room room) {
        //Add A TblController For Each Room
        if (m_mapTableController.containsKey(room.getName()) == false) {
            double betChip = room.getVariable(RoomVariableDetail.BET_CHIP).getDoubleValue();
            TableController tbl;
            if (room.getGroupId().equals("game_tala")) {
                tbl = new TaLaController(betChip);
            } else if (room.getGroupId().equals("game_poker")) {
                tbl = new PokerController(room.getName(), betChip);
            } else {
                tbl = null;
            }

            if (tbl != null) {
                m_mapTableController.put(room.getName(), tbl);
            }
        }
    }

    @Override
    public void HandleServerReady(SFSGameEvent evt) {
        loadTournamentData();
    }

    protected void loadTournamentData() {
        try {
            Logger.trace("Enter GameController::handleLoadTournament");
            ISFSArray arrTours = GlobalValue.dataProxy.getTournamentList("", 0, 9999);
            for (int i = 0; i < arrTours.size(); i++) {
                ISFSObject item = arrTours.getSFSObject(i);
                TournamentEntity tourInfo = new TournamentEntity();
                tourInfo.setLevelType(item.getInt(TournamentInfoParams.LEVEL_TYPE));
                tourInfo.setBeginLevel(item.getInt(TournamentInfoParams.BEGIN_LEVEL));
                tourInfo.setEndLevel(item.getInt(TournamentInfoParams.END_LEVEL));
                tourInfo.setCapacity(item.getInt(TournamentInfoParams.CAPACITY));
                tourInfo.setCreateBy(item.getUtfString(TournamentInfoParams.CREATE_BY));
                tourInfo.setDisplayName(item.getUtfString(TournamentInfoParams.DISPLAY_NAME));
                tourInfo.setFee(Double.parseDouble(item.getUtfString(TournamentInfoParams.FEE)));
                tourInfo.setFirstPrize(Double.parseDouble(item.getUtfString(TournamentInfoParams.FIRST_PRIZE)));
                tourInfo.setName(item.getUtfString(TournamentInfoParams.NAME));
                tourInfo.setPlayerCount(item.getInt(TournamentInfoParams.PLAYER_IN_GAME));
                tourInfo.setSecondPrize(Double.parseDouble(item.getUtfString(TournamentInfoParams.SECOND_PRIZE)));
                tourInfo.setStartingChip(Double.parseDouble(item.getUtfString(TournamentInfoParams.STARTING_CHIP)));
                tourInfo.setStatus(item.getUtfString(TournamentInfoParams.STATUS));
                tourInfo.setThirdPrize(Double.parseDouble(item.getUtfString(TournamentInfoParams.THIRD_PRIZE)));

                processCreateTournament(tourInfo);
            }

        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    public void removeTournament(String tourName) {
        try {
            Logger.trace("Enter GameController::removeTournament");

            PokerTournamentController tourCtrl = (PokerTournamentController) m_mapTournamentController.remove(tourName);
            if (tourCtrl != null) {
                tourCtrl.destroyTour();
            }
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    //khoatd
    @Override
    public void HandleGameMessage(SFSGameRequest request) {
        //khoatd
        User sender = request.getM_user();
        if (request.GetRequestName().equals(GAME_REQUEST_NAME.GET_LIST_FREE_USER_REQ)) {
            handleGetListFreeUser(sender, request);
        } else if (request.GetRequestName().equals(GAME_REQUEST_NAME.INVITATION_REQ)) {
            handleInvitation(sender, request);
        } else if (request.GetRequestName().equals(GAME_REQUEST_NAME.INVITATION_REPLY_REQ)) {
            handleInvitationReply(sender, request);
        } else if (request.GetRequestName().equals(GAME_REQUEST_NAME.GET_TRANS_BY_USER_REQ)) {
            handleGetTransByUser(sender, request);
        } else if (request.GetRequestName().equals(POKER_TOUR_REQUEST_NAME.CREATE_TOUR)) {
            handleCreateTournament(sender, request);
        } else if (request.GetRequestName().equals(POKER_TOUR_REQUEST_NAME.GET_LIST_TOUR)) {
            handleGetListTournament(sender, request);
        } else if (request.GetRequestName().equals(POKER_TOUR_REQUEST_NAME.GET_DETAIL_TOUR)) {
            handleGetDetailTournament(sender, request);
        } else if (request.GetRequestName().equals(POKER_TOUR_REQUEST_NAME.REGISTRY_TOUR)) {
            handleRegistryTournament(sender, request);
        } else if (request.GetRequestName().equals(POKER_TOUR_REQUEST_NAME.UNREGISTRY_TOUR)) {
            handleUnregistryTournament(sender, request);
        } else if (request.GetRequestName().equals(POKER_TOUR_REQUEST_NAME.REPLY_INVITE_TOUR)) {
            handleReplyInvitation(sender, request);
        } else {
            //SangDN: Forward Game Message To TableController Where User Is Joined In
            if (sender.getLastJoinedRoom() != null) {
                String roomName = sender.getLastJoinedRoom().getName();
                if (roomName.contains("tour_")) {
                    //create a new poker tournament
                    String tourName = handleGetTourName(roomName);
                    IGameController game = m_mapTournamentController.get(tourName);
                    if (game != null) {
                        game.HandleGameMessage(request);
                    }
                } else {
                    TableController tbl = m_mapTableController.get(roomName);
                    if(tbl != null){
                        tbl.HandleGameMessage(sender, request);
                    }
                }
            }
        }
    }

    public void handleCreateTournament(User sender, SFSGameRequest request) {
        try {
            Logger.trace("Enter GameController:: handleCreateTournament");
            CreateTourRequest req = (CreateTourRequest) request;
            String tourName = req.getTournamentName();
            PokerTournamentController tournament = new PokerTournamentController();
            tournament.handleCreateTournament(request);
            m_mapTournamentController.put(tourName, tournament);
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    public void processCreateTournament(TournamentEntity tourInfo) {
        PokerTournamentController tournament = new PokerTournamentController();
        tournament.processCreateTournament(tourInfo);
        m_mapTournamentController.put(tourInfo.getName(), tournament);
    }

    public void handleRegistryTournament(User sender, SFSGameRequest request) {
        try {
            Logger.trace("Enter GameController:: handleRegistryTournament");
            RegistryRequest req = (RegistryRequest) request;
            String tourName = req.getTourName();
            PokerTournamentController ctrl = (PokerTournamentController) m_mapTournamentController.get(tourName);
            if (ctrl != null) {
                ctrl.handleUserRegistry(request);
            }
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    public void handleUnregistryTournament(User sender, SFSGameRequest request) {
        try {
            Logger.trace("Enter GameController:: handleUnRegistryTournament");
            UnregistryRequest req = (UnregistryRequest) request;
            String tourName = req.getTourName();
            PokerTournamentController ctrl = (PokerTournamentController) m_mapTournamentController.get(tourName);
            if (ctrl != null) {
                ctrl.handleUserUnregistry(request);
            }
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

//    public void handleGetListTournament(User sender, SFSGameRequest request) {
//        try {
//            Logger.trace("Enter GameController:: handleGetListTournament");
//            ArrayList<TournamentEntity> listTourEntity = new ArrayList<TournamentEntity>();
//
//            boolean isRegistried = false;
//            String strTourName = "";
//
//            Set<String> listKey = m_mapTournamentController.keySet();
//            Object[] temp = listKey.toArray();
//            for (int i = 0; i < listKey.size(); i++) {
//                String key = temp[i].toString();
//                PokerTournamentController ctrl = (PokerTournamentController) m_mapTournamentController.get(key);
//                if (ctrl != null) {
//                    PokerTournamentInfo info = ctrl.getTournamentInfo();
//                    TournamentEntity tourObj = info.getTournamentEntity();
//                    listTourEntity.add(tourObj);
//
//                    isRegistried = info.getListRegisterName().contains(sender.getName());
//                    if (isRegistried) {
//                        strTourName = info.getTournamentName();
//                    }
//                }
//            }
//            if (strTourName.equals("")) {
//                isRegistried = false;
//            } else {
//                isRegistried = true;
//            }
//
//            GetListTourRes response = new GetListTourRes();
//            response.setListTourEntity(listTourEntity).setIsRegistried(isRegistried).setRegisTourName(strTourName);
//            response.AddParam(POKER_TOUR_RESPONSE_NAME.GET_LIST_TOUR_RES, response.ToSFSObject());
//            response.AddReceiver(sender);
//
//            GlobalValue.sfsServer.send(response.GetReponseName(), response.GetParam(), response.GetListReceiver());
//        } catch (Exception ex) {
//            Logger.error(this.getClass(), ex);
//        }
//    }
    public void handleGetListTournament(User sender, SFSGameRequest request) {
        try {
            Logger.trace("Enter GameController:: handleGetListTournament");

            boolean isRegistried = false;
            String strTourName = "";

            ArrayList<TournamentEntity> listTourEntity = getListTourFromDB();

            for (int i = 0; i < listTourEntity.size(); i++) {
                String name = listTourEntity.get(i).getName();
                PokerTournamentController ctrl = (PokerTournamentController) m_mapTournamentController.get(name);
                if (ctrl != null) {
                    PokerTournamentInfo info = ctrl.getTournamentInfo();

                    if (info.getListRegisterName().contains(sender.getName())) {
                        strTourName = info.getTournamentName();
                        isRegistried = true;
                    }
                }
            }

//            GetListTourRes response = new GetListTourRes();
//            response.setListTourEntity(listTourEntity).setIsRegistried(isRegistried).setRegisTourName(strTourName);
//            response.AddParam(POKER_TOUR_RESPONSE_NAME.GET_LIST_TOUR_RES, response.ToSFSObject());
//            response.AddReceiver(sender);
            
            ISFSArray arrTournaments = GlobalValue.dataProxy.getTournamentListWithSBBlind("", 0, 99999);
            
            GetListTournamentRes response = new GetListTournamentRes();
            response.setArrTournaments(arrTournaments).setIsRegistried(isRegistried).setRegisTourName(strTourName);
            response.AddParam(POKER_TOUR_RESPONSE_NAME.GET_LIST_TOUR_RES, response.ToSFSObject());
            response.AddReceiver(sender);

            GlobalValue.sfsServer.send(response.GetReponseName(), response.GetParam(), response.GetListReceiver());
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    public ArrayList<TournamentEntity> getListTourFromDB() {
        ArrayList<TournamentEntity> listTourEntity = new ArrayList<TournamentEntity>();

        ISFSArray arrTour = GlobalValue.dataProxy.getTournamentList("", 0, 9999);
        for (int i = 0; i < arrTour.size(); i++) {
            ISFSObject item = arrTour.getSFSObject(i);
            TournamentEntity tour = new TournamentEntity();
            tour.setName(item.getUtfString(TournamentInfoParams.NAME));
            tour.setDisplayName(item.getUtfString(TournamentInfoParams.DISPLAY_NAME));
            tour.setFee(Double.parseDouble(item.getUtfString(TournamentInfoParams.FEE)));
            tour.setCapacity(item.getInt(TournamentInfoParams.CAPACITY));
            tour.setLevelType(item.getInt(TournamentInfoParams.LEVEL_TYPE));
            tour.setBeginLevel(item.getInt(TournamentInfoParams.BEGIN_LEVEL));
            tour.setEndLevel(item.getInt(TournamentInfoParams.END_LEVEL));
            tour.setStatus(item.getUtfString(TournamentInfoParams.STATUS));
            tour.setStartingChip(Double.parseDouble(item.getUtfString(TournamentInfoParams.STARTING_CHIP)));
            tour.setFirstPrize(Double.parseDouble(item.getUtfString(TournamentInfoParams.FIRST_PRIZE)));
            tour.setSecondPrize(Double.parseDouble(item.getUtfString(TournamentInfoParams.SECOND_PRIZE)));
            tour.setThirdPrize(Double.parseDouble(item.getUtfString(TournamentInfoParams.THIRD_PRIZE)));

            listTourEntity.add(tour);
        }

        return listTourEntity;
    }

    public void handleGetDetailTournament(User sender, SFSGameRequest request) {
        try {
            Logger.trace("Enter GameController:: handleGetDetailTournament");

            GetDetailTourRequest req = (GetDetailTourRequest) request;
            String tourName = req.getTournamentName();
            PokerTournamentController ctrl = (PokerTournamentController) m_mapTournamentController.get(tourName);
            if (ctrl != null) {
                ctrl.handleGetTournamentDetail(request);
            }
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    private void handleReplyInvitation(User sender, SFSGameRequest request) {
        try {
            ReplyInviteTourRequest req = (ReplyInviteTourRequest) request;
            String tourName = req.getTourName();
            PokerTournamentController ctrl = (PokerTournamentController) m_mapTournamentController.get(tourName);
            if (ctrl != null) {
                ctrl.handleReplyInvitation(sender, request);
            }
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    protected String handleGetTourName(String roomName) {
        String[] temp = roomName.split("_");//room which is in tournament has name : "tour_[tourName]_[roomName]"
        if (temp.length > 1) {
            return temp[1];
        } else {
            return null;
        }
    }

    protected void handleGetListFreeUser(User sender, SFSGameRequest request) {
        try {
            Logger.trace("Enter GameController:: handleGetListFreeUser");
            GetListFreeUserResponse response = new GetListFreeUserResponse();
            List<User> listUser = getListFreeUser();
            response.setM_listUser(listUser);
            response.AddParam(GAME_RESPONSE_NAME.GET_LIST_FREE_USER_RES, response.ToSFSObject());
            response.AddReceiver(sender);
            GlobalValue.sfsServer.send(response.GetReponseName(), response.GetParam(), response.GetListReceiver());
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    protected void handleInvitation(User sender, SFSGameRequest request) {
        try {
            Logger.trace("Enter GameController:: handleInvitation");
            InvitationRequest inviteRequest = (InvitationRequest) request;
            String userName = sender.getName();

            ArrayList<String> listInviteUser = inviteRequest.getM_listInviteUser();
            int roomId = inviteRequest.getM_roomId();

            InvitationResponse response = new InvitationResponse();
            response.setM_userInvite(userName).setM_message(inviteRequest.getM_message()).setM_roomId(roomId).AddParam(GAME_RESPONSE_NAME.INVITATION_RES, response.ToSFSObject());

            for (int i = 0; i < listInviteUser.size(); i++) {
                User user = GlobalValue.smartfoxServer.getUserManager().getUserByName(listInviteUser.get(i));
                response.AddReceiver(user);
            }
            GlobalValue.sfsServer.send(response.GetReponseName(), response.GetParam(), response.GetListReceiver());
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    protected void handleInvitationReply(User sender, SFSGameRequest request) {
        try {
            Logger.trace("Enter GameController:: handleInvitationReply");
            InvitationReplyRequest replyRequest = (InvitationReplyRequest) request;

            int reply = replyRequest.getM_invitationReply();
            String userName = replyRequest.getM_receiverName();

            User user = GlobalValue.smartfoxServer.getUserManager().getUserByName(userName);

            InvitationReplyResponse response = new InvitationReplyResponse();
            response.setM_invitationReply(reply).setM_userReply(sender.getName()).AddParam(GAME_RESPONSE_NAME.INVITATION_RES, response.ToSFSObject()).AddReceiver(user);
            GlobalValue.sfsServer.send(response.GetReponseName(), response.GetParam(), response.GetListReceiver());
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    protected List<User> getListFreeUser() {
        List<User> listUser = GlobalValue.smartfoxServer.getUserManager().getAllUsers();

        return listUser;
    }

    @Override
    public void HandlePlayerToSpectator(SFSGameEvent evt) {
        try {
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    @Override
    public void HandleRoomAdded(SFSGameEvent evt) {
        try {
            //KhoadTD: Add room to map roomId-tableController
            RoomAdded roomEvt = (RoomAdded) evt;
            Room room = roomEvt.getM_room();
            if (room.getName().contains("tour_") == false) {
                ProcessRoomAdded(room);
            }
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    @Override
    public void HandleRoomRemove(SFSGameEvent evt) {
        try {
            //KhoadTD: remove room to map roomId-tableController
            RoomRemove roomEvt = (RoomRemove) evt;
            String roomName = roomEvt.getM_room().getName();

            if (roomName.contains("tour_") == false) {
                TableController tblController = m_mapTableController.get(roomName);
                if (tblController != null) {
                    //if(roomEvt.getM_room().getGroupId().equals("game_tala"))
                    tblController.HandleRoomRemove(evt);
                }

                RemoveMapTableController(roomEvt.getM_room().getName());
            } else {
                String[] temp = roomName.split("_");
                IGameController tourController = m_mapTournamentController.get(temp[1]);

                if (tourController != null) {
                    tourController.HandleRoomRemove(evt);
                }
            }
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    @Override
    public void HandleRoomVariableUpdate(SFSGameEvent evt) {
        try {
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    @Override
    public void HandleSpectatorToPlayer(SFSGameEvent evt) {
        try {
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    @Override
    public void HandleUserDisconnect(SFSGameEvent evt) {
        try {
            UserDisconnect disconnectEvt = (UserDisconnect) evt;
            //String roomName = disconnectEvt.getM_listJoinedRoom().get(disconnectEvt.getM_listJoinedRoom().size() - 1).getName();
            //Room lastRoomJoin = disconnectEvt.getM_user().getLastJoinedRoom();

            Room lastRoomJoin = null;
            if (disconnectEvt.getM_listJoinedRoom().size() > 0) {
                lastRoomJoin = disconnectEvt.getM_listJoinedRoom().get(disconnectEvt.getM_listJoinedRoom().size() - 1);
            }

            if (lastRoomJoin != null) {
                String roomName = lastRoomJoin.getName();
                if (roomName.contains("tour_") == false) {
                    TableController tblController = m_mapTableController.get(roomName);
                    if (tblController != null) {
                        tblController.HandleUserDisconnect(evt);
                    }
                } else {
                    handleDisconnectForTournament(evt, disconnectEvt.getM_user().getName());
                }
            } else {
                handleDisconnectForTournament(evt, disconnectEvt.getM_user().getName());
            }
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }

    }

    private void handleDisconnectForTournament(SFSGameEvent evt, String userName) {
        String key = findTourByUser(userName);
        if (key != null) {
//                    String[] temp = roomName.split("_");

//                    IGameController gameCtrl = m_mapTournamentController.get(temp[1]);
            IGameController gameCtrl = m_mapTournamentController.get(key);
            if (gameCtrl != null) {
                gameCtrl.HandleUserDisconnect(evt);
            }
        }
    }

    private String findTourByUser(String userName) {
        Object[] listKey = m_mapTournamentController.keySet().toArray();
        for (int i = 0; i < listKey.length; i++) {
            Object key = listKey[i];
            PokerTournamentController ctrl = (PokerTournamentController) m_mapTournamentController.get(key.toString());

            if (isContainUser(ctrl, userName)) {
                return key.toString();
            }
        }
        return null;
    }

    private boolean isContainUser(PokerTournamentController ctrl, String userName) {
        if (ctrl.getTournamentInfo().getListRegisterName().contains(userName)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public void HandleUserLogout(SFSGameEvent evt) {
        try {
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    @Override
    public void HandlerUserJoinRoom(SFSGameEvent evt) {
        try {
            UserJoinRoom joinEvt = (UserJoinRoom) evt;
            String strRoomName = joinEvt.getM_room().getName();
            //GameController Process
            //....

            if (strRoomName.contains("tour_") == false) {
                //Quick Fix Error: RoomJoinEvt fire before RoomAddedEvt
                if (m_mapTableController.containsKey(strRoomName) == false) {
                    ProcessRoomAdded(joinEvt.getM_room());
                }
                //Forward To Specific table process
                TableController tblController = m_mapTableController.get(strRoomName);
                if (tblController != null) {
                    tblController.HandleUserJoinRoom(evt);
                }
            } else {
                String[] temp = strRoomName.split("_");//roomName: tour_sitngo1_room1

                IGameController gameCtrl = m_mapTournamentController.get(temp[1]);
                if (gameCtrl != null) {
                    gameCtrl.HandlerUserJoinRoom(evt);
                }
            }

            //updateRoomStatusInDB(joinEvt.getM_room());

        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

//    protected void updateRoomStatusInDB(Room room) {
//        String status = RoomStatus.EMPTY;
//
//        int userCount = room.getUserList().size();
//        int spectatorCount = room.getSpectatorsList().size();
//        if (userCount + spectatorCount > 0) {
//            status = RoomStatus.PLAYING;
//        }
//
//        GlobalValue.dataProxy.changeRoomStatus(room.getName(), status);
//    }

    @Override
    public void HandleUserLeaveRoom(SFSGameEvent evt) {
        try {
            //khoatd
            UserExitRoom exitEvt = (UserExitRoom) evt;
            String strRoomName = exitEvt.getM_room().getName();
            if (strRoomName.contains("tour_") == false) {
                TableController tblController = m_mapTableController.get(strRoomName);
                if (tblController != null) {
                    tblController.HandleUserLeaveRoom(evt);
                }
            } else {
                String[] temp = strRoomName.split("_");

                IGameController gameCtrl = m_mapTournamentController.get(temp[1]);
                if (gameCtrl != null) {
                    gameCtrl.HandleUserLeaveRoom(evt);
                }
            }

//            updateRoomStatusInDB(exitEvt.getM_room());
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    @Override
    public void HandleUserVariableUpdate(SFSGameEvent evt) {
        try {
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

//    @Override
//    public void HandleConfirmReadyGame(SFSGameRequest req) {
//     try {
//            ConfirmReadyGameRequest confirmReq = (ConfirmReadyGameRequest) req;
//            String strRoomName = confirmReq.getM_roomName();
//            TableController tblController = m_mapTableController.get(strRoomName);
//            if (tblController != null) {
//                tblController.HandleConfirmReadyGame(confirmReq);
//            }
//        } catch (Exception ex) {
//            Logger.error(this.getClass(), ex);
//        }
//    }
    public void SetMapTableController(String key, TableController controller) {
        m_mapTableController.put(key, controller);
    }

    public boolean ContainKey(String key) {
        if (m_mapTableController.get(key) != null) {
            return true;
        } else {
            return false;
        }
    }

    public void RemoveMapTableController(String key) {
        m_mapTableController.remove(key);
    }

    public void RemoveMapTournamentController(String key) {
        m_mapTournamentController.remove(key);
    }

    public PokerTournamentController getMapTournamentController(String tourName) {
        if (m_mapTournamentController.containsKey(tourName)) {
            return (PokerTournamentController) m_mapTournamentController.get(tourName);
        } else {
            ISFSArray sfsArr = GlobalValue.dataProxy.getTournamentInfo(tourName);
            if (sfsArr != null && sfsArr.size() == 1) {
                ISFSObject sfsObj = sfsArr.getSFSObject(0);
                TournamentEntity tourEntity = TournamentEntity.fromSFSObject(sfsObj);
                processCreateTournament(tourEntity);
            }
        }
        return null;
    }

    public TableController GetTableController(String key) {
        return m_mapTableController.get(key);
    }

    public static GameController getInstance() {
        if (m_instance == null) {
            m_instance = new GameController();
        }
        return m_instance;
    }
//    public PokerTournamentController getMapTourController(String name) {
//        return m_mapTournamentController.get(name);
//    }

    private void handleGetTransByUser(User sender, SFSGameRequest request) {
        try {
            GetTransactionByUserRequest req = (GetTransactionByUserRequest)request;
            String userName = req.getUserName();
            int index = req.getIndex();
            int numRow = req.getNumRow();
            
            ISFSArray litsTrans = GlobalValue.dataProxy.getTransaction(userName, "", "", "", index, numRow);
            
            GetTransByUserResponse response = new GetTransByUserResponse();
            response.setArrTrasactions(litsTrans);
             response.AddParam(GAME_RESPONSE_NAME.GET_TRANS_BY_USER_RES, response.ToSFSObject());
            response.AddReceiver(sender);
            GlobalValue.sfsServer.send(response.GetReponseName(), response.GetParam(), response.GetListReceiver());
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }
}

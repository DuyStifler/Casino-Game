//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : casino project
//  @ File Name : RunningController.java
//  @ Date : 5/27/2012
//  @ Author : sangdn
//  @ Description: 
//      + Running Controller Is NORMAL && MOST IMPORTANT controller
//      + Check type of message and forward it to specify controller who should process it
//



package casino.cardgame.controller.server;

import casino.cardgame.message.event.RoomAdded;
import casino.cardgame.message.event.SFSGameEvent;
import casino.cardgame.message.request.GAME_REQUEST_NAME;
import casino.cardgame.message.request.SFSGameRequest;
import casino.cardgame.utils.GlobalValue;
import com.smartfoxserver.v2.entities.variables.RoomVariable;
import com.smartfoxserver.v2.exceptions.SFSLoginException;
import java.util.List;


public class RunningController extends  ServerController {
    
    //Singleton Implement **************************************************
    //
    protected static RunningController m_instance;
    protected RunningController(){
        super();
    }
    public  static RunningController getInstance(){
        if(m_instance == null){
            m_instance = new RunningController();
        }
        return m_instance;
    }
    //
    //End Singleton Implement **************************************************
    @Override
    public void HandleAdminMessage(SFSGameRequest sfsreq) {
        this.m_adminController.HandleAdminMessageRequest(sfsreq);
    }

    //khoatd edited
    @Override
    public void HandleGameMessage(SFSGameRequest sfsreq) {
        this.m_gameController.HandleGameMessage(sfsreq);
    }
    //older version
//    @Override
//    public void HandleGameMessage(SFSGameRequest sfsreq) {
//        //throw new UnsupportedOperationException("Not supported yet.");
//        if(sfsreq.GetRequestName() == GAME_REQUEST_NAME.GET_TOP_WINNER_REQ){
//            
//        }
//    }
    
    @Override
    public void HandleUserLogin(SFSGameEvent sfse) throws SFSLoginException{
        this.m_userController.HandleUserLogin(sfse);
    }

    @Override
    public void HandlePlayerToSpectator(SFSGameEvent sfse) {
        this.m_gameController.HandlePlayerToSpectator(sfse);
    }

    @Override
    public void HandlePrivateMessage(SFSGameEvent sfse) {
        this.m_chatController.HandlePrivateMessage(sfse);
    }

    @Override
    public void HandlePublicMessage(SFSGameEvent sfse) {
        this.m_chatController.HandlePublicMessage(sfse);
    }

    @Override
    public void HandleRoomAdded(SFSGameEvent sfse) {
        //Make RoomVariable To Global
        RoomAdded evt = (RoomAdded) sfse;
                
        List<RoomVariable> list = evt.getM_room().getVariables();
        if(list != null){
            for(int i = 0; i < list.size(); ++i){
                RoomVariable v = list.get(i);
                v.setGlobal(true);

            }
            GlobalValue.sfsServer.getApi().setRoomVariables(null, evt.getM_room(), list, true, false, false);
        }
        //Forward to game controller to process roomadded event        
        this.m_gameController.HandleRoomAdded(sfse);
    }

    @Override
    public void HandleRoomRemove(SFSGameEvent sfse) {
        this.m_gameController.HandleRoomRemove(sfse);
    }

    @Override
    public void HandleRoomVariableUpdate(SFSGameEvent sfse) {
        this.m_gameController.HandleRoomVariableUpdate(sfse);
    }

    @Override
    public void HandleSpectatorToPlayer(SFSGameEvent sfse) {
        this.m_gameController.HandlePlayerToSpectator(sfse);
    }

    @Override
    public void HandleServerReady(SFSGameEvent sfse) {
        this.m_gameController.HandleServerReady(sfse);
    }

    @Override
    public void HandleUserDisconect(SFSGameEvent sfse) {
        this.m_gameController.HandleUserDisconnect(sfse);        
    }

    @Override
    public void HandleUserJoinRoom(SFSGameEvent sfse) {
        this.m_gameController.HandlerUserJoinRoom(sfse);
    }

    @Override
    public void HandleUserLeaveRoom(SFSGameEvent sfse) {
        this.m_gameController.HandleUserLeaveRoom(sfse);
    }

    @Override
    public void HandleUserLogOut(SFSGameEvent sfse) {
        this.m_gameController.HandleUserLogout(sfse);
        this.m_userController.HandleUserLogout(sfse);
    }

    @Override
    public void HandleUserVariableUpdate(SFSGameEvent sfse) {
        this.m_gameController.HandleUserVariableUpdate(sfse);
    }

    @Override
    public void HandleUserJoinZone(SFSGameEvent joinZoneEvt) {
        this.m_userController.HandleUserJoinZone(joinZoneEvt);
    }

    
}

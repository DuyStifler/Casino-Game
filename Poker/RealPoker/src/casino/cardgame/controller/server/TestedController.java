//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : casino project
//  @ File Name : TestedController.java
//  @ Date : 5/27/2012
//  @ Author : sangdn
//  @ Description: TestedController is used for tested purpose.
//              + The data is randomize, all user login would be use this data
//              + The other process would call RunningController to process instead
//              + DATA IS RANDOM NOW
//                  + //Add UserInfo
//                  + //Add UserPass
//                  +  //Add TopWinner Num = 10;
//                  +  //Add LeaderBoard Num = 10;
//
package casino.cardgame.controller.server;

import casino.cardgame.entity.LeaderBoardInfo;
import casino.cardgame.entity.RoomInfo;
import casino.cardgame.entity.TopWinnerInfo;
import casino.cardgame.entity.UserInfo;
import casino.cardgame.entity.game.TournamentEntity;
import casino.cardgame.game_enum.*;
import casino.cardgame.message.event.SFSGameEvent;
import casino.cardgame.message.reponse.GAME_RESPONSE_NAME;
import casino.cardgame.message.reponse.RegisterErrorResponse;
import casino.cardgame.message.reponse.RegisterResponse;
import casino.cardgame.message.request.GAME_REQUEST_NAME;
import casino.cardgame.message.request.RegisterRequest;
import casino.cardgame.message.request.SFSGameRequest;
import casino.cardgame.utils.GlobalValue;
import casino.cardgame.utils.Logger;
import casino.cardgame.utils.data.NormalDataProxy;
import com.smartfoxserver.v2.api.CreateRoomSettings;
import com.smartfoxserver.v2.entities.Zone;
import com.smartfoxserver.v2.entities.data.ISFSArray;
import com.smartfoxserver.v2.entities.data.ISFSObject;
import com.smartfoxserver.v2.entities.variables.RoomVariable;
import com.smartfoxserver.v2.entities.variables.SFSRoomVariable;
import com.smartfoxserver.v2.exceptions.SFSCreateRoomException;
import com.smartfoxserver.v2.exceptions.SFSLoginException;
import hirondelle.date4j.DateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.TimeZone;

public class TestedController implements IServerController {
    //Singleton Implement **************************************************
    //

    protected static TestedController m_instance;

    protected TestedController() {
        Logger.trace("INIT TestedController");
//        RandomUserData();
    }

    public static TestedController getInstance() {
        if (m_instance == null) {
            m_instance = new TestedController();
        }
        return m_instance;
    }
    //
    //End Singleton Implement **************************************************

    private void RandomUserData() {
        Logger.trace("RANDOM USER DATA");
        try {
            //Init UserInfo
            int num = 1000;
            for (int i = 2; i < num; ++i) {
                //Add UserInfo
                String name = "user" + String.valueOf(i);
                String mail = name + "@" + "gmail.com";
                String display = "User #" + String.valueOf(i);
                Double chip = 1500.0;
                Double tourChip = 0.0;
                Double buyIn = 0.0;
                Double gameChip = 0.0;
                DateTime joined = DateTime.now(TimeZone.getDefault());
                DateTime reg = DateTime.today(TimeZone.getDefault());
                Double totalDeposit = 5000.0;
                String title = UserTitle.NORMAL;
                String status = UserStatus.WAITING;
                int totalMatch = i;
                int win = i / 2;
                int lost = i / 2;
                String locate = "VietNam";
                String avartar = "";
                List<String> listFriend = null;

                String pass = "1";

                UserInfo info = new UserInfo(name, pass, mail, display, chip, tourChip, buyIn, gameChip, joined,
                        reg, totalDeposit, title, status, totalMatch,
                        win, lost, locate, avartar, null, listFriend);
                if (GlobalValue.dataProxy == null) {
                    GlobalValue.dataProxy = NormalDataProxy.getInstance();
                }
                GlobalValue.dataProxy.addUserInfo(info);
                //Add UserPass
                GlobalValue.dataProxy.addUserPass(name, pass);

                //Add TopWinner Num = 10;
                int nTopWinner = 10;
                List<TopWinnerInfo> topWinner = new ArrayList<TopWinnerInfo>();
                if (i >= num - nTopWinner) {
                    GlobalValue.dataProxy.addTopWinner(topWinner);
                }

                //Add TopLeaderBoard
                int nTopLeaderBoard = 10;
                List<LeaderBoardInfo> topLeader = new ArrayList<LeaderBoardInfo>();
                if (i >= num - nTopLeaderBoard) {
                    GlobalValue.dataProxy.addLeaderBoard(topLeader);
                }

            }
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }

    }

    @Override
    public void HandleAdminMessage(SFSGameRequest sfsreq) {
        RunningController.getInstance().HandleAdminMessage(sfsreq);
    }

    @Override
    public void HandleGameMessage(SFSGameRequest sfsreq) {
        if (sfsreq.GetRequestName().equals(GAME_REQUEST_NAME.REGISTER_REQ)) {
            handleUserRegistry(sfsreq);
        } else {
            RunningController.getInstance().HandleGameMessage(sfsreq);
        }
    }

    private void handleUserRegistry(SFSGameRequest sfsreq) {
        try {
            RegisterRequest req = (RegisterRequest) sfsreq;

            String name = req.getUserName();
            String mail = req.getEmail();
            String display = "User";
            Double chip = 1500.0;
            Double tourChip = 0.0;
            Double buyIn = 0.0;
            Double gameChip = 0.0;
            DateTime joined = DateTime.now(TimeZone.getDefault());
            DateTime reg = DateTime.today(TimeZone.getDefault());
            Double totalDeposit = 5000.0;
            String title = UserTitle.NORMAL;
            String status = UserStatus.WAITING;
            int totalMatch = 0;
            int win = 0;
            int lost = 0;
            String locate = "VietNam";
            String avartar = "";
            List<String> listFriend = null;

            String pass = req.getPassword();

            UserInfo info = new UserInfo(name, pass, mail, display, chip, tourChip, buyIn, gameChip, joined,
                    reg, totalDeposit, title, status, totalMatch, win, lost, locate, avartar, null, listFriend);
            if (GlobalValue.dataProxy == null) {
                GlobalValue.dataProxy = NormalDataProxy.getInstance();
            }
            GlobalValue.dataProxy.addUserInfo(info);
            //Add UserPass
            GlobalValue.dataProxy.addUserPass(name, pass);


//            RegisterResponse response = new RegisterResponse();
//            response.AddParam(GAME_RESPONSE_NAME.REGISTER_RES, response.ToSFSObject());
//            response.AddReceiver(req.getM_user());
//
//            GlobalValue.sfsServer.send(response.GetReponseName(), response.GetParam(), response.GetListReceiver());
        } catch (Exception exc) {
            Logger.error(exc);

//            RegisterErrorResponse response = new RegisterErrorResponse();
//            response.setMesage(exc.getMessage());
//            response.AddParam(GAME_RESPONSE_NAME.REGISTER_ERROR_RES, response.ToSFSObject());
//            response.AddReceiver(sfsreq.getM_user());
//
//            GlobalValue.sfsServer.send(response.GetReponseName(), response.GetParam(), response.GetListReceiver());
        }
    }

    @Override
    public void HandleUserLogin(SFSGameEvent sfse) throws SFSLoginException {
        //pass to RUNNING Handler
        RunningController.getInstance().HandleUserLogin(sfse);
    }

    @Override
    public void HandlePlayerToSpectator(SFSGameEvent sfse) {
        //pass to RUNNING Handler
        RunningController.getInstance().HandlePlayerToSpectator(sfse);
    }

    @Override
    public void HandlePrivateMessage(SFSGameEvent sfse) {
        RunningController.getInstance().HandlePrivateMessage(sfse);
    }

    @Override
    public void HandlePublicMessage(SFSGameEvent sfse) {
        RunningController.getInstance().HandlePublicMessage(sfse);
    }

    @Override
    public void HandleRoomAdded(SFSGameEvent sfse) {
        RunningController.getInstance().HandleRoomAdded(sfse);
    }

    @Override
    public void HandleRoomRemove(SFSGameEvent sfse) {
        RunningController.getInstance().HandleRoomRemove(sfse);
    }

    @Override
    public void HandleRoomVariableUpdate(SFSGameEvent sfse) {
        RunningController.getInstance().HandleRoomVariableUpdate(sfse);
    }

    @Override
    public void HandleSpectatorToPlayer(SFSGameEvent sfse) {
        RunningController.getInstance().HandleSpectatorToPlayer(sfse);
    }

    @Override
    public void HandleServerReady(SFSGameEvent sfse) {
        RunningController.getInstance().HandleServerReady(sfse);
        //Create Room For Testing Only
        Logger.trace("TestedController::HandlerServerReady Event");
        //CreateRoom();
        resetAllRoom();
        loadRoomData();
        resetAllTounament();
    }

    protected void resetAllRoom(){
        try {
            Logger.trace("Enter TestedController::resetAllRoom");
            GlobalValue.dataProxy.UpdateRoomStatus("", RoomStatus.EMPTY);
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }
    protected void loadRoomData() {
        try {
            Logger.trace("Enter TestedController::loadRoomData");
            ISFSArray arrRooms = GlobalValue.dataProxy.getRoomList("", 0, 99999);
            for (int i = 0; i < arrRooms.size(); i++) {
                ISFSObject item = arrRooms.getSFSObject(i);
                RoomInfo roomInfo = new RoomInfo();
                roomInfo.setBetChip(Double.parseDouble(item.getUtfString(RoomInfoParams.BET_CHIP)));
                roomInfo.setBigBlind(Double.parseDouble(item.getUtfString(RoomInfoParams.BIG_BLIND)));
                roomInfo.setCreateBy(item.getUtfString(RoomInfoParams.CREATE_BY));
                roomInfo.setDisplayName(item.getUtfString(RoomInfoParams.DISPLAY_NAME));
                roomInfo.setMaxBuyin(Double.parseDouble(item.getUtfString(RoomInfoParams.MAX_BUY_IN)));
                roomInfo.setMaxUsers(item.getInt(RoomInfoParams.MAX_USER));
                roomInfo.setMinBuyin(Double.parseDouble(item.getUtfString(RoomInfoParams.MIN_BUY_IN)));
                roomInfo.setNoLimit(item.getInt(RoomInfoParams.NO_LITMIT) != 0);
                roomInfo.setRoomName(item.getUtfString(RoomInfoParams.NAME));
                roomInfo.setPassword(item.getUtfString(RoomInfoParams.PASSWORD));
                roomInfo.setSmallBlind(Double.parseDouble(item.getUtfString(RoomInfoParams.SMALL_BLIND)));
                roomInfo.setStatus(item.getUtfString(RoomInfoParams.STATUS));
                CreateRoom(roomInfo);
            }

        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    protected void loadUserData() {
        try {
            Logger.trace("Enter TestedController::loadUserData");
            ISFSArray arrUsers = GlobalValue.dataProxy.getUserList("", 0, 99999);

            for (int i = 0; i < arrUsers.size(); i++) {
                ISFSObject item = arrUsers.getSFSObject(i);
                UserInfo userInfo = new UserInfo();
                userInfo.setAvartar(item.getUtfString(UserInfoParams.AVARTAR));
                userInfo.setBuyIn(item.getDouble(UserInfoParams.BUY_IN));
                userInfo.setTourChip(item.getDouble(UserInfoParams.TOUR_CHIP));
                userInfo.setChip(item.getDouble(UserInfoParams.CHIP));
                userInfo.setDisplayName(item.getUtfString(UserInfoParams.DISPLAY_NAME));
                userInfo.setEmail(item.getUtfString(UserInfoParams.EMAIL));
                userInfo.setPassWord(item.getUtfString(UserInfoParams.PASSWORD));
                userInfo.setLocation(item.getUtfString(UserInfoParams.LOCATION));
                userInfo.setRole(item.getUtfString(UserInfoParams.ROLE));
                userInfo.setTotalWinMatch(item.getInt(UserInfoParams.TOTAL_WIN_MATCH));
                userInfo.setTotalPlayedMatch(item.getInt(UserInfoParams.TOTAL_PLAYED_MATCH));
                userInfo.setIsPlaying(item.getBool(UserInfoParams.IS_PLAYING));

            }

        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    protected void resetAllTounament(){
        try {
            Logger.trace("Enter TestedController::renewAllTounament");
            GlobalValue.dataProxy.resetTour("");
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }
    @Override
    public void HandleUserDisconect(SFSGameEvent sfse) {
        RunningController.getInstance().HandleUserDisconect(sfse);
    }

    @Override
    public void HandleUserJoinRoom(SFSGameEvent sfse) {
        RunningController.getInstance().HandleUserJoinRoom(sfse);
    }

    @Override
    public void HandleUserLeaveRoom(SFSGameEvent sfse) {
        RunningController.getInstance().HandleUserLeaveRoom(sfse);
    }

    @Override
    public void HandleUserLogOut(SFSGameEvent sfse) {
        RunningController.getInstance().HandleUserLogOut(sfse);
    }

    @Override
    public void HandleUserVariableUpdate(SFSGameEvent sfse) {
        RunningController.getInstance().HandleUserVariableUpdate(sfse);
    }

    @Override
    public void HandleUserJoinZone(SFSGameEvent joinZoneEvt) {
        RunningController.getInstance().HandleUserJoinZone(joinZoneEvt);
    }

    protected void CreateRoom(RoomInfo roomInfo) {
        Zone currentZone = GlobalValue.smartfoxServer.getZoneManager().getZoneByName("RealPokerServer");
        String newRoomName = roomInfo.getRoomName();

//        CreateRoomSettings setting = CreateSettingRoom(newRoomName, roomInfo);
        CreateRoomSettings setting = new CreateRoomSettings();
        setting.setName(newRoomName);
        setting.setMaxUsers(roomInfo.getMaxUsers());
        setting.setMaxVariablesAllowed(20);
        setting.setGame(true);
        setting.setGroupId("game_poker");

        ArrayList<RoomVariable> roomVariable = new ArrayList<RoomVariable>();
        roomVariable.add(new SFSRoomVariable(RoomVariableDetail.DISPLAY_NAME, roomInfo.getDisplayName()));
        roomVariable.add(new SFSRoomVariable(RoomVariableDetail.PASSWORD, roomInfo.getPassword()));
        roomVariable.add(new SFSRoomVariable(RoomVariableDetail.BET_CHIP, roomInfo.getBetChip()));
        roomVariable.add(new SFSRoomVariable(RoomVariableDetail.MIN_BUYIN, roomInfo.getMinBuyin()));
        roomVariable.add(new SFSRoomVariable(RoomVariableDetail.MAX_BUYIN, roomInfo.getMaxBuyin()));
        roomVariable.add(new SFSRoomVariable(RoomVariableDetail.NO_LIMIT, roomInfo.getNoLimit()));
        setting.setRoomVariables(roomVariable);

        Logger.trace("create Room: " + newRoomName);
        try {
            GlobalValue.smartfoxServer.getAPIManager().getSFSApi().createRoom(currentZone, setting, null);
        } catch (Exception exc) {
            Logger.error(exc);
        }
    }

    public CreateRoomSettings CreateSettingRoom(String roomName, double betChip, int roomIndex) {
        try {
            CreateRoomSettings setting = new CreateRoomSettings();
            setting.setName(roomName);
            setting.setMaxUsers(12);
            setting.setMaxVariablesAllowed(20);
            setting.setGame(true);
            setting.setGroupId("game_poker");

            ArrayList<RoomVariable> roomVariable = new ArrayList<RoomVariable>();
            roomVariable.add(new SFSRoomVariable(RoomVariableDetail.DISPLAY_NAME, "Game" + roomIndex));
            roomVariable.add(new SFSRoomVariable(RoomVariableDetail.PASSWORD, ""));
            roomVariable.add(new SFSRoomVariable(RoomVariableDetail.BET_CHIP, betChip));
            roomVariable.add(new SFSRoomVariable(RoomVariableDetail.MIN_BUYIN, 500));
            roomVariable.add(new SFSRoomVariable(RoomVariableDetail.MAX_BUYIN, Double.MAX_VALUE));
            roomVariable.add(new SFSRoomVariable(RoomVariableDetail.NO_LIMIT, true));
            setting.setRoomVariables(roomVariable);
            return setting;
        } catch (Exception ex) {
            Logger.error("TestedController::CreateSettingRoom", ex);
            return null;
        }
    }
}

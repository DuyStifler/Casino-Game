//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : casino project
//  @ File Name : Sfs2xDBController.java
//  @ Date : 5/27/2012
//  @ Author : sangdn
//
//
package casino.cardgame.utils.data;

import casino.cardgame.entity.*;
import casino.cardgame.entity.game.LevelDetailEntity;
import casino.cardgame.entity.game.TableHistory;
import casino.cardgame.entity.game.TournamentEntity;
import casino.cardgame.game_enum.*;
import casino.cardgame.utils.GlobalValue;
import casino.cardgame.utils.Logger;
import com.smartfoxserver.v2.db.IDBManager;
import com.smartfoxserver.v2.entities.data.ISFSArray;
import com.smartfoxserver.v2.entities.data.ISFSObject;
import hirondelle.date4j.DateTime;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;

public class Sfs2xDBController implements IDbController {

    public static final String TABLE_ADMIN = "admin";
    public static final String TABLE_USER = "user";
    public static final String TABLE_TRANSACTION_HISTORY = "transactionhistory";
    public static final String TABLE_TOURNAMENT = "tournament";
    public static final String TABLE_LEVEL_COLLECTION = "levelcollection";
    public static final String TABLE_LEVEL_DETAIL = "leveldetail";
    public static final String TABLE_ROOM = "room";
    public static final String TABLE_ADMIN_INFO = "admin_info";
    private IDBManager m_dbManager = GlobalValue.sfsServer.getParentZone().getDBManager();
    private static Sfs2xDBController m_instance = null;
    private Calendar m_cal = Calendar.getInstance();
    private SimpleDateFormat m_sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private DecimalFormat m_df = new DecimalFormat("#.00");

    private Sfs2xDBController() {
    }

    public static Sfs2xDBController getInstance() {
        if (m_instance == null) {
            m_instance = new Sfs2xDBController();
        }
        return m_instance;
    }

    ///*******************************************************************///
    //        KHOATD:      NEW DATABASE CONTROLLER SECTION
    ///*******************************************************************///
    public boolean createNewUser(UserInfo user) throws Exception {
//        try {

        String sqlString = "INSERT INTO " + TABLE_USER
                + " (" + UserInfoParams.USER_NAME
                + ", " + UserInfoParams.PASSWORD
                + ", " + UserInfoParams.DISPLAY_NAME
                + ", " + UserInfoParams.EMAIL
                + ", " + UserInfoParams.CHIP
                + ", " + UserInfoParams.TOUR_CHIP
                + ", " + UserInfoParams.BUY_IN
                + ", " + UserInfoParams.DATE_REGISTER
                + ") VALUES( ?, ? , ? , ? , ?, ? , ? , ?)";

        Object[] params = new Object[8];
        params[0] = user.getUserName();
        params[1] = user.getPassWord();
        params[2] = user.getDisplayName();
        params[3] = user.getEmail();
        params[4] = user.getChip();
        params[5] = user.getTourChip();
        params[6] = user.getBuyIn();
        params[7] = m_sdf.format(m_cal.getTime());
        m_dbManager.executeUpdate(sqlString, params);

        return true;
//        } catch (SQLException ex) {
//            Logger.trace(ex.getMessage());
//            return false;
//        }
    }

    public boolean createNewRoom(RoomInfo room) throws Exception {
//        try {

        String sqlString = "INSERT INTO " + TABLE_ROOM
                + " (" + RoomInfoParams.NAME
                + ", " + RoomInfoParams.DISPLAY_NAME
                + ", " + RoomInfoParams.PASSWORD
                + ", " + RoomInfoParams.MAX_USER
                + ", " + RoomInfoParams.BET_CHIP
                + ", " + RoomInfoParams.SMALL_BLIND
                + ", " + RoomInfoParams.BIG_BLIND
                + ", " + RoomInfoParams.MIN_BUY_IN
                + ", " + RoomInfoParams.MAX_BUY_IN
                + ", " + RoomInfoParams.NO_LITMIT
                + ", " + RoomInfoParams.STATUS
                + ", " + RoomInfoParams.CREATE_BY
                + ") VALUES( ?, ? , ? , ? , ?, ? , ? , ?, ?, ?, ?, ?)";

        Object[] params = new Object[12];
        params[0] = room.getRoomName();
        params[1] = room.getDisplayName();
        params[2] = room.getPassword();
        params[3] = room.getMaxUsers();
        params[4] = room.getBetChip();
        params[5] = room.getSmallBlind();
        params[6] = room.getBigBlind();
        params[7] = room.getMinBuyin();
        params[8] = room.getMaxBuyin();
        params[9] = room.getNoLimit();
        params[10] = room.getStatus();
        params[11] = room.getCreateBy();
        m_dbManager.executeUpdate(sqlString, params);

        return true;
//        } catch (SQLException ex) {
//            Logger.trace(ex.getMessage());
//            return false;
//        }
    }

    public boolean createNewTournament(TournamentEntity tour) throws Exception {
//        try {

        String sqlString = "INSERT INTO " + TABLE_TOURNAMENT
                + " (" + TournamentInfoParams.NAME
                + ", " + TournamentInfoParams.DISPLAY_NAME
                + ", " + TournamentInfoParams.CAPACITY
                + ", " + TournamentInfoParams.PLAYER_IN_GAME
                + ", " + TournamentInfoParams.STARTING_CHIP
                + ", " + TournamentInfoParams.FEE
                + ", " + TournamentInfoParams.LEVEL_TYPE
                + ", " + TournamentInfoParams.BEGIN_LEVEL
                + ", " + TournamentInfoParams.END_LEVEL
                //                + ", " + TournamentInfoParams.BET_CHIP
                //                + ", " + TournamentInfoParams.SMALL_BLIND
                //                + ", " + TournamentInfoParams.BIG_BLIND
                + ", " + TournamentInfoParams.FIRST_PRIZE
                + ", " + TournamentInfoParams.SECOND_PRIZE
                + ", " + TournamentInfoParams.THIRD_PRIZE
                + ", " + TournamentInfoParams.STATUS
                + ", " + TournamentInfoParams.CREATE_BY
                + ") VALUES( ?, ? , ? , ? , ?, ? , ? , ?, ?, ?, ?, ?, ? ,?)";

        Object[] params = new Object[14];
        params[0] = tour.getName();
        params[1] = tour.getDisplayName();
        params[2] = tour.getCapacity();
        params[3] = tour.getPlayerCount();
        params[4] = tour.getStartingChip();
        params[5] = tour.getFee();
        params[6] = tour.getLevelType();
        params[7] = tour.getBeginLevel();
        params[8] = tour.getEndLevel();
        params[9] = tour.getFirstPrize();
        params[10] = tour.getSecondPrize();
        params[11] = tour.getThirdPrize();
        params[12] = tour.getStatus();
        params[13] = m_sdf.format(m_cal.getTime());
        m_dbManager.executeUpdate(sqlString, params);

        return true;
//        } catch (SQLException ex) {
//            Logger.trace(ex.getMessage());
//            return false;
//        }
    }

    public boolean createNewLevel(LevelDetailEntity level) throws Exception {

        String sqlString = "INSERT INTO " + TABLE_LEVEL_DETAIL
                + " (" + LevelDetailParams.LEVEL
                + ", " + LevelDetailParams.LEVEL_TYPE
                + ", " + LevelDetailParams.SMALL_BLIND
                + ", " + LevelDetailParams.BIG_BLIND
                + ", " + LevelDetailParams.ANTE
                + ", " + LevelDetailParams.TIME_LIFE
                + ") VALUES( ?, ? , ? , ? , ?, ?)";

        Object[] params = new Object[6];
        params[0] = level.getLevel();
        params[1] = level.getLevelType();
        params[2] = level.getSmallBlind();
        params[3] = level.getBigBlind();
        params[4] = level.getAnte();
        params[5] = level.getTimeLife();
        m_dbManager.executeUpdate(sqlString, params);

        return true;
    }

    public boolean updateUserInfo(UserInfo user) throws Exception {
//        try {
        String sqlString = " UPDATE " + TABLE_USER + " SET "
                + UserInfoParams.PASSWORD + "=?, "
                + UserInfoParams.DISPLAY_NAME + "=?, "
                + UserInfoParams.CHIP + "=?, "
                + UserInfoParams.BUY_IN + "=?, "
                + UserInfoParams.TOUR_CHIP + "=?, "
                + UserInfoParams.LOCATION + "=?, "
                + UserInfoParams.AVARTAR + "=?, "
                + UserInfoParams.EMAIL + "=? "
                + " WHERE " + UserInfoParams.USER_NAME + "=?";

        Object[] params = new Object[9];
        params[0] = user.getPassWord();
        params[1] = user.getDisplayName();
        params[2] = m_df.format(user.getChip());
        params[3] = user.getBuyIn();
        params[4] = user.getTourChip();
        params[5] = user.getLocation();
        params[6] = user.getAvartar();
        params[7] = user.getEmail();
        params[8] = user.getUserName();
        m_dbManager.executeUpdate(sqlString, params);
        return true;
//        } catch (SQLException ex) {
//            Logger.error(this.getClass(), ex);
//            return false;
//        }
    }

    public boolean updateRoomInfo(RoomInfo room) throws Exception {
//        try {
        String sqlString = " UPDATE " + TABLE_ROOM + " SET "
                + RoomInfoParams.DISPLAY_NAME + "=?, "
                + RoomInfoParams.PASSWORD + "=?, "
                + RoomInfoParams.MAX_USER + "=?, "
                + RoomInfoParams.BET_CHIP + "=?, "
                + RoomInfoParams.SMALL_BLIND + "=?, "
                + RoomInfoParams.BIG_BLIND + "=?, "
                + RoomInfoParams.MIN_BUY_IN + "=?, "
                + RoomInfoParams.MAX_BUY_IN + "=?, "
                + RoomInfoParams.NO_LITMIT + "=?, "
                + RoomInfoParams.STATUS + "=? "
                + " WHERE " + RoomInfoParams.NAME + "=?";

        Object[] params = new Object[11];
        params[0] = room.getDisplayName();
        params[1] = room.getPassword();
        params[2] = room.getMaxUsers();
        params[3] = room.getBetChip();
        params[4] = room.getSmallBlind();
        params[5] = room.getBigBlind();
        params[6] = room.getMinBuyin();
        params[7] = room.getMaxBuyin();
        params[8] = room.getNoLimit();
        params[9] = room.getStatus();
        params[10] = room.getRoomName();
        m_dbManager.executeUpdate(sqlString, params);

        return true;
//        } catch (SQLException ex) {
//            Logger.error(this.getClass(), ex);
//            return false;
//        }
    }

    public boolean updateTournamentInfo(TournamentEntity tour) throws Exception {
//        try {
        String sqlString = " UPDATE " + TABLE_TOURNAMENT + " SET "
                + TournamentInfoParams.DISPLAY_NAME + "=?, "
                + TournamentInfoParams.CAPACITY + "=?, "
                + TournamentInfoParams.STARTING_CHIP + "=?, "
                + TournamentInfoParams.FEE + "=?, "
                + TournamentInfoParams.LEVEL_TYPE + "=?, "
                + TournamentInfoParams.BEGIN_LEVEL + "=?, "
                + TournamentInfoParams.END_LEVEL + "=?, "
                //                + TournamentInfoParams.BET_CHIP + "=?, "
                //                + TournamentInfoParams.SMALL_BLIND + "=?, "
                //                + TournamentInfoParams.BIG_BLIND + "=?, "
                + TournamentInfoParams.FIRST_PRIZE + "=?, "
                + TournamentInfoParams.SECOND_PRIZE + "=?, "
                + TournamentInfoParams.THIRD_PRIZE + "=? "
                + " WHERE " + TournamentInfoParams.NAME + "=? AND "
                + TournamentInfoParams.STATUS + " = '" + TournamentStatus.STOPPING + " ' ";

        Object[] params = new Object[11];
        params[0] = tour.getDisplayName();
        params[1] = tour.getCapacity();
        params[2] = tour.getStartingChip();
        params[3] = tour.getFee();
        params[4] = tour.getLevelType();
        params[5] = tour.getBeginLevel();
        params[6] = tour.getEndLevel();
        params[7] = tour.getFirstPrize();
        params[8] = tour.getSecondPrize();
        params[9] = tour.getThirdPrize();
        params[10] = tour.getName();
        m_dbManager.executeUpdate(sqlString, params);

        return true;
//        } catch (SQLException ex) {
//            Logger.error(this.getClass(), ex);
//            return false;
//        }
    }

    public boolean updateLevel(LevelDetailEntity level) throws Exception {
        String sqlString = " UPDATE " + TABLE_LEVEL_DETAIL + " SET "
                + LevelDetailParams.LEVEL + "=?, "
                + LevelDetailParams.LEVEL_TYPE + "=?, "
                + LevelDetailParams.SMALL_BLIND + "=?, "
                + LevelDetailParams.BIG_BLIND + "=?, "
                + LevelDetailParams.ANTE + "=?, "
                + LevelDetailParams.TIME_LIFE + "=? "
                + " WHERE " + LevelDetailParams.ID + "=?";

        Object[] params = new Object[7];
        params[0] = level.getLevel();
        params[1] = level.getLevelType();
        params[2] = level.getSmallBlind();
        params[3] = level.getBigBlind();
        params[4] = level.getAnte();
        params[5] = level.getTimeLife();
        params[6] = level.getId();
        m_dbManager.executeUpdate(sqlString, params);
        return true;
    }

    public boolean deleteUser(String user_name) throws Exception {
//        try {
        String sqlString = " DELETE FROM " + TABLE_USER
                + " WHERE " + UserInfoParams.USER_NAME + "=? "
                + " AND " + UserInfoParams.IS_PLAYING + " = 0 ";
        m_dbManager.executeUpdate(sqlString, new Object[]{user_name});
        return true;
//        } catch (SQLException ex) {
//            Logger.error(this.getClass(), ex);
//            return false;
//        }
    }

    public boolean deleteRoom(String roomName) throws Exception {
//        try {
        String sqlString = " DELETE FROM " + TABLE_ROOM
                + " WHERE " + RoomInfoParams.NAME + "=? "
                + " AND " + RoomInfoParams.STATUS + " = '" + RoomStatus.EMPTY + "'";
        m_dbManager.executeUpdate(sqlString, new Object[]{roomName});
        return true;
//        } catch (SQLException ex) {
//            Logger.error(this.getClass(), ex);
//            return false;
//        }
    }

    public boolean deleteTournament(String tourName) throws Exception {
//        try {
        String sqlString = " DELETE FROM " + TABLE_TOURNAMENT
                + " WHERE " + TournamentInfoParams.NAME + "=? "
                + " AND " + TournamentInfoParams.STATUS + " = '" + TournamentStatus.STOPPING + "'";
        m_dbManager.executeUpdate(sqlString, new Object[]{tourName});
        return true;
//        } catch (SQLException ex) {
//            Logger.error(this.getClass(), ex);
//            return false;
//        }
    }

    public boolean deleteLevel(int id) throws Exception {
        String sqlString = " DELETE FROM " + TABLE_LEVEL_DETAIL
                + " WHERE " + LevelDetailParams.ID + "=? ";
        m_dbManager.executeUpdate(sqlString, new Object[]{id});
        return true;
    }

    //tourName == "" -> update all.
    public boolean updateTourStatus(String tourName, String status) throws Exception {
        String sqlString = " UPDATE " + TABLE_TOURNAMENT + " SET "
                + TournamentInfoParams.STATUS + "= ? "
                + " WHERE " + TournamentInfoParams.NAME + " = ? OR '" + tourName + "' = ''";

        Object[] params = new Object[2];
        params[0] = status;
        params[1] = tourName;
        m_dbManager.executeUpdate(sqlString, params);
        return true;
    }

    //if name == "" -> update all.
    public boolean updateRoomStatus(String name, String status) throws Exception {
        String sqlString = " UPDATE " + TABLE_ROOM + " SET "
                + RoomInfoParams.STATUS + "= ? "
                + " WHERE " + RoomInfoParams.NAME + " = ? OR '" + name + "' = ''";

        Object[] params = new Object[2];
        params[0] = status;
        params[1] = name;
        m_dbManager.executeUpdate(sqlString, params);
        return true;
    }

    //if tourName == "" -> reset all.
    public boolean resetTour(String tourName) throws Exception {
        String sqlString = " UPDATE " + TABLE_TOURNAMENT + " SET "
                + TournamentInfoParams.STATUS + "= ? "
                + " WHERE (" + TournamentInfoParams.NAME + " = ? OR '" + tourName + "' = '') AND "
                + TournamentInfoParams.STATUS + " != ?";

        Object[] params = new Object[3];
        params[0] = TournamentStatus.WAITING;
        params[1] = tourName;
        params[2] = TournamentStatus.STOPPING;
        m_dbManager.executeUpdate(sqlString, params);
        return true;
    }

    public void UpdateUserInTour(String tourName, int userCount) throws Exception{
        String sqlString = " UPDATE " + TABLE_TOURNAMENT + " SET "
                + TournamentInfoParams.PLAYER_IN_GAME + "= ? "
                + " WHERE " + TournamentInfoParams.NAME + " = ? ";

        Object[] params = new Object[2];
        params[0] = userCount;
        params[1] = tourName;
        m_dbManager.executeUpdate(sqlString, params);
    }
    
    public void updateUserChip(String userName, double chip) throws Exception{
         String sqlString = " UPDATE " + TABLE_USER + " SET "
                + UserInfoParams.CHIP + "= ? "
                + " WHERE " + UserInfoParams.USER_NAME + " = ? ";

        Object[] params = new Object[2];
        params[0] = chip;
        params[1] = userName;
        m_dbManager.executeUpdate(sqlString, params);
    }

    public void changeRoomStatus(String roomName, String status) {
        try {
            String sqlString = "UPDATE " + TABLE_ROOM + " SET " + RoomInfoParams.STATUS + " = '" + status
                    + "' WHERE " + RoomInfoParams.NAME + " = '" + roomName + "'";
            m_dbManager.executeUpdate(sqlString);
        } catch (SQLException ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    public ISFSArray getUserListByName(String name, int index, int numRow) {
        try {
            String sqlString = "SELECT * FROM " + TABLE_USER + " WHERE "
                    + UserInfoParams.USER_NAME + " LIKE '%" + name + "%' " + " LIMIT ? , ?";
            Object[] params = new Object[2];
            params[0] = index;
            params[1] = numRow;
            return m_dbManager.executeQuery(sqlString, params);
        } catch (SQLException ex) {
            Logger.error(this.getClass(), ex);
            return null;
        }
    }

    public ISFSArray getRoomListByName(String name, int index, int numRow) {
        try {
            String sqlString = "SELECT * FROM " + TABLE_ROOM + " WHERE "
                    + RoomInfoParams.NAME + " LIKE '%" + name + "%' " + " LIMIT ? , ?";
            Object[] params = new Object[2];
            params[0] = index;
            params[1] = numRow;
            return m_dbManager.executeQuery(sqlString, params);
        } catch (SQLException ex) {
            Logger.error(this.getClass(), ex);
            return null;
        }
    }

    public ISFSArray getRoomByName(String name) {
        try {
            String sqlString = "SELECT * FROM " + TABLE_ROOM + " WHERE "
                    + RoomInfoParams.NAME + " = ?";
            Object[] params = new Object[1];
            params[0] = name;
            return m_dbManager.executeQuery(sqlString, params);
        } catch (SQLException ex) {
            Logger.error(this.getClass(), ex);
            return null;
        }
    }

    public ISFSArray getTournamentListByName(String name, int index, int numRow) {
        try {
//            String sqlString = "SELECT * FROM " + TABLE_TOURNAMENT + " WHERE "
//                    + TournamentInfoParams.NAME + " LIKE '%" + name + "%' " + " LIMIT ? , ?";
            String sqlString = "SELECT * FROM " + TABLE_TOURNAMENT + " T, " + TABLE_LEVEL_COLLECTION + " L WHERE L.ID = T." + TournamentInfoParams.LEVEL_TYPE
                    + " AND " + TournamentInfoParams.NAME + " LIKE '%" + name + "%' " + " LIMIT ? , ?";
            Object[] params = new Object[2];
            params[0] = index;
            params[1] = numRow;
            return m_dbManager.executeQuery(sqlString, params);
        } catch (SQLException ex) {
            Logger.error(this.getClass(), ex);
            return null;
        }
    }

    public ISFSArray getTournamentListWithSBBlind(String name, int index, int numRow) {
        try {
//            String sqlString = "SELECT * FROM " + TABLE_TOURNAMENT + " WHERE "
//                    + TournamentInfoParams.NAME + " LIKE '%" + name + "%' " + " LIMIT ? , ?";
            String sqlString = "SELECT * FROM " + TABLE_TOURNAMENT + " T, " + TABLE_LEVEL_DETAIL + " LD "
                    + "WHERE T." + TournamentInfoParams.LEVEL_TYPE + " = LD." + LevelDetailParams.LEVEL_TYPE
                    + " AND T." + TournamentInfoParams.BEGIN_LEVEL + " = LD." + LevelDetailParams.LEVEL
                    + " LIMIT ? , ?";
            Object[] params = new Object[2];
            params[0] = index;
            params[1] = numRow;
            return m_dbManager.executeQuery(sqlString, params);
        } catch (SQLException ex) {
            Logger.error(this.getClass(), ex);
            return null;
        }
    }

    public ISFSArray getListLevel(int levelType, int index, int numRow) {
        try {
//            String sqlString = "SELECT * FROM " + TABLE_LEVEL_DETAIL + " LD, " + TABLE_LEVEL_COLLECTION + " LC "
//                    + "WHERE LD." + LevelDetailParams.LEVEL_TYPE + " = LC.ID AND " + LevelDetailParams.LEVEL_TYPE + " = ? LIMIT ? , ?";

            String sqlString = "SELECT * FROM " + TABLE_LEVEL_DETAIL + " WHERE " + LevelDetailParams.LEVEL_TYPE + " = ? LIMIT ? , ?";
            Object[] params = new Object[3];
            params[0] = levelType;
            params[1] = index;
            params[2] = numRow;
            return m_dbManager.executeQuery(sqlString, params);
        } catch (SQLException ex) {
            Logger.error(this.getClass(), ex);
            return null;
        }
    }

    public ISFSArray getListLevelCollection() {
        try {
            String sqlString = "SELECT * FROM " + TABLE_LEVEL_COLLECTION;
            return m_dbManager.executeQuery(sqlString);
        } catch (SQLException ex) {
            Logger.error(this.getClass(), ex);
            return null;
        }
    }

    public ISFSArray getTournamentInfo(String name) {
        try {
            String sqlString = "SELECT * FROM " + TABLE_TOURNAMENT + " WHERE "
                    + TournamentInfoParams.NAME + " = '" + name + "' ";
            return m_dbManager.executeQuery(sqlString);
        } catch (SQLException ex) {
            Logger.error(this.getClass(), ex);
            return null;
        }
    }

    public ISFSArray getTransaction(String userName, String admin, String fromDate, String toDate, int index, int numRow) {
        try {
            String sqlString = "SELECT * FROM " + TABLE_TRANSACTION_HISTORY + " WHERE "
                    + TransactionParams.USER_NAME + " LIKE '%" + userName + "%' AND "
                    + TransactionParams.BY_ADMIN + " LIKE '%" + admin + "%' "
                    + "AND (" + TransactionParams.DATE + " >= '" + fromDate + "' or '" + fromDate + "' = '') "
                    + "AND (" + TransactionParams.DATE + " <= '" + toDate + "' or '" + toDate + "' = '')"
                    + " LIMIT ? , ?";

            Object[] params = new Object[2];
            params[0] = index;
            params[1] = numRow;
            return m_dbManager.executeQuery(sqlString, params);
        } catch (SQLException ex) {
            Logger.error(this.getClass(), ex);
            return null;
        }
    }

    public ISFSArray getLevelDetailByType(int levelType, int beginLevel, int endLevel) {
        try {
            String sqlString = "SELECT * FROM " + TABLE_LEVEL_DETAIL + " WHERE "
                    + LevelDetailParams.LEVEL_TYPE + " = ?"
                    + " AND " + LevelDetailParams.LEVEL + " BETWEEN ? AND ?"
                    + " ORDER BY " + LevelDetailParams.LEVEL;
            Object[] params = new Object[3];
            params[0] = levelType;
            params[1] = beginLevel;
            params[2] = endLevel;
            return m_dbManager.executeQuery(sqlString, params);
        } catch (SQLException ex) {
            Logger.error(this.getClass(), ex);
            return null;
        }
    }

    ///*******************************************************************///
    //              END NEW DATABASE CONTROLLER SECTION
    ///*******************************************************************///
    @Override
    public UserInfo GetUserInfo(String strUserName) {
        try {
            String sqlString = "SELECT * FROM " + TABLE_USER + " WHERE " + UserInfoParams.USER_NAME + " = '" + strUserName + "'";
            ISFSArray arr = m_dbManager.executeQuery(sqlString);

            if (arr.size() == 1) {
                ISFSObject item = arr.getSFSObject(0);
                UserInfo userInfo = new UserInfo();
                userInfo.setUserName(item.getUtfString(UserInfoParams.USER_NAME));
                userInfo.setAvartar(item.getUtfString(UserInfoParams.AVARTAR));
                userInfo.setBuyIn(Double.parseDouble(item.getUtfString(UserInfoParams.BUY_IN)));
                userInfo.setTourChip(Double.parseDouble(item.getUtfString(UserInfoParams.TOUR_CHIP)));
                userInfo.setChip(Double.parseDouble(item.getUtfString(UserInfoParams.CHIP)));
                userInfo.setDisplayName(item.getUtfString(UserInfoParams.DISPLAY_NAME));
                userInfo.setEmail(item.getUtfString(UserInfoParams.EMAIL));
                userInfo.setPassWord(item.getUtfString(UserInfoParams.PASSWORD));
                userInfo.setLocation(item.getUtfString(UserInfoParams.LOCATION));
                userInfo.setRole(item.getUtfString(UserInfoParams.ROLE));
                userInfo.setTotalWinMatch(item.getInt(UserInfoParams.TOTAL_WIN_MATCH));
                userInfo.setTotalPlayedMatch(item.getInt(UserInfoParams.TOTAL_PLAYED_MATCH));
                userInfo.setIsPlaying(item.getInt(UserInfoParams.IS_PLAYING) != 0);

                return userInfo;
            } else {
                return null;
            }
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
            return null;
        }
    }

    @Override
    public String GetUserPassword(String strUserName) {
        try {
            String sqlString = "SELECT " + UserInfoParams.PASSWORD
                    + " FROM " + TABLE_USER + " WHERE " + UserInfoParams.USER_NAME + " = '" + strUserName + "'";
            ISFSArray arr = m_dbManager.executeQuery(sqlString);

            if (arr.size() == 1) {
                return arr.getSFSObject(0).getUtfString(UserInfoParams.PASSWORD);
            } else {
                return null;
            }
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
            return null;
        }
    }

    @Override
    public String GetAdminPassword(String adminName) {
        try {
            String sqlString = "SELECT password FROM " + TABLE_ADMIN
                    + " WHERE name = '" + adminName + "'";
            ISFSArray arr = m_dbManager.executeQuery(sqlString);

            if (arr.size() == 1) {
                return arr.getSFSObject(0).getUtfString(UserInfoParams.PASSWORD);
            } else {
                return null;
            }
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
            return null;
        }
    }

    @Override
    public TableResult GetTableResult(String strTableID) {
        try {
            return null;
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        } finally {
            return null;
        }
    }

    @Override
    public TransactionInfo GetTransactionInfo(String strOwnerName) {
        try {
            return null;
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        } finally {
            return null;
        }
    }

    @Override
    public List<TransactionInfo> GetTransactionHistory(String strOwnerName, DateTime fromDate, DateTime toDate) {
        try {
            return null;
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        } finally {
            return null;
        }
    }

    @Override
    public List<TransactionInfo> GetTransactionHistory(String strOwnerName, int fromIndex, int numRecord) {
        try {
            return null;
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        } finally {
            return null;
        }
    }

    @Override
    public TableHistory GetTableHistory(int tableID) {
        try {
            return null;
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        } finally {
            return null;
        }
    }

    @Override
    public List<LoginHistory> GetLoginHistory(String strUserName, DateTime fromDate, DateTime toDate) {
        try {
            return null;
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        } finally {
            return null;
        }
    }

    @Override
    public List<LoginHistory> GetLoginHistory(String strUserName, int fromIndex, int numRecord) {
        try {
            return null;
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        } finally {
            return null;
        }
    }

    @Override
    public List<RoomHistory> GetCreatedRoomHistory(DateTime fromDate, DateTime toDate) {
        try {
            return null;
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        } finally {
            return null;
        }
    }

    @Override
    public List<RoomHistory> GetCreatedRoomHistory(int fromIndex, int numRecord) {
        try {
            return null;
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        } finally {
            return null;
        }
    }

    @Override
    public List<ServerStateHistory> GetServerStateHistory(DateTime fromDate, DateTime toDate) {
        try {
            return null;
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        } finally {
            return null;
        }
    }

    @Override
    public List<ServerStateHistory> GetServerStateHistory(int fromIndex, int numRecord) {
        try {
            return null;
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        } finally {
            return null;
        }
    }

    @Override
    public List<LeaderBoardInfo> GetLeaderBoard() {
        try {
            return null;
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        } finally {
            return null;
        }
    }

    @Override
    public List<TopWinnerInfo> GetTopWiner() {
        try {
            return null;
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        } finally {
            return null;
        }
    }

    @Override
    public void addUserInfo(UserInfo info) {
        try {
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    @Override
    public void addUserPass(String strUserName, String pass) {
        try {
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    @Override
    public void addTableResult(TableResult result) {
        try {
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    @Override
    public void addTransactionInfo(TransactionInfo trans) throws Exception {
//        try {
        String sqlString = "INSERT INTO " + TABLE_TRANSACTION_HISTORY
                + " (" + TransactionParams.USER_NAME
                + ", " + TransactionParams.BY_ADMIN
                + ", " + TransactionParams.TYPE
                + ", " + TransactionParams.AMOUNT
                + ", " + TransactionParams.DATE
                + ") VALUES( ?, ? , ? , ? , ?)";

        Object[] params = new Object[5];
        params[0] = trans.getUserName();
        params[1] = trans.getByAdmin();
        params[2] = trans.getType();
        params[3] = trans.getAmount();
        params[4] = m_sdf.format(m_cal.getTime());
        m_dbManager.executeUpdate(sqlString, params);

//        } catch (Exception ex) {
//            Logger.error(this.getClass(), ex);
//        }
    }

    @Override
    public void addTableHistory(TableHistory tblHistory) {
        try {
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    @Override
    public void addLoginHistory(LoginHistory loginHistory) {
        try {
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    @Override
    public void addRoomHistory(RoomHistory room) {
        try {
        } catch (Exception ex) {
            Logger.error(this.getClass(), ex);
        }
    }

    @Override
    public void addChipForUser(String userName, double amount) throws Exception {
        String sqlString = " UPDATE " + TABLE_USER + " SET "
                + UserInfoParams.CHIP + " = " + UserInfoParams.CHIP + " + ? "
                + " WHERE " + UserInfoParams.USER_NAME + "=?";

        Object[] params = new Object[2];
        params[0] = amount;
        params[1] = userName;
        m_dbManager.executeUpdate(sqlString, params);
    }
}

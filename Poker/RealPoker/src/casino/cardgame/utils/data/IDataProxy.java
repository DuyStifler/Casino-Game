//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : casino project
//  @ File Name : IDataProxy.java
//  @ Date : 5/27/2012
//  @ Author : sangdn
//
//
package casino.cardgame.utils.data;

import casino.cardgame.entity.*;
import casino.cardgame.entity.game.LevelDetailEntity;
import casino.cardgame.entity.game.TableHistory;
import casino.cardgame.entity.game.TournamentEntity;
import com.smartfoxserver.v2.entities.data.ISFSArray;
import hirondelle.date4j.DateTime;
import java.util.ArrayList;
import java.util.List;

public interface IDataProxy {
    //GET DATA API INTERFACE

    public casino.cardgame.entity.UserInfo GetUserInfo(String strUserName);

    public String GetUserPassword(String strUserName);
    
    public String GetAdminPassword(String adminName);

    public casino.cardgame.entity.TableResult GetTableResult(String strTableID);

    public casino.cardgame.entity.TransactionInfo GetTransactionInfo(String strOwnerName);

    public List<TransactionInfo> GetTransactionHistory(String strOwnerName, DateTime fromDate, DateTime toDate);

    public List<TransactionInfo> GetTransactionHistory(String strOwnerName, int fromIndex, int numRecord);

    public casino.cardgame.entity.game.TableHistory GetTableHistory(int tableID);

    //khoatd List<ILoginHistory>
    public List<LoginHistory> GetLoginHistory(String strUserName, DateTime fromDate, DateTime toDate);

    public List<LoginHistory> GetLoginHistory(String strUserName, int fromIndex, int numRecord);

    public List<RoomHistory> GetCreatedRoomHistory(DateTime fromDate, DateTime toDate);

    public List<RoomHistory> GetCreatedRoomHistory(int fromIndex, int numRecord);

    public List<ServerStateHistory> GetServerStateHistory(DateTime fromDate, DateTime toDate);

    public List<ServerStateHistory> GetServerStateHistory(int fromIndex, int numRecord);

    public void logTransactionWinChip(String userName, String fromUser, double chip);
    //end khoatd

    public List<LeaderBoardInfo> GetLeaderBoard();

    public List<TopWinnerInfo> GetTopWiner();
    //SET & SAVE DATA API

    public boolean addUserInfo(UserInfo info) throws Exception;
    
    public void addUserToMemCach(UserInfo info) throws Exception;

    public void addUserPass(String strUserName, String pass);

    public void addTableResult(TableResult result);

    public void addTransactionInfo(TransactionInfo trans) throws Exception;
    
    public void addChipForUser(String userName, double amount) throws Exception;

    public void addTableHistory(TableHistory tblHistory);

    public void addLoginHistory(LoginHistory loginHistory);

    public void addRoomHistory(RoomHistory room);

    public void addTopWinner(List<TopWinnerInfo> topWinner);

    public void addLeaderBoard(List<LeaderBoardInfo> topLeader);

    //khoatd 
    public void updateUserGameChip(double gameChip);
    //check card and return gamechip if card is valid and return -1 if card is invalid

    public double checkCard(String serialNumber, String cardPass);

    //khoatd
    public void updateUser(UserInfo user)throws Exception;
    
    public void updateUserChip(String userName, double chip)throws Exception;

    public void deleteUser(String userName)throws Exception;

    public void createRoom(RoomInfo room)throws Exception;

    public void updateRoom(RoomInfo room)throws Exception;
    
    public void deleteRoom(String roomName)throws Exception;

    public void createTournament(TournamentEntity tour)throws Exception;

    public void updateTournament(TournamentEntity tour)throws Exception;
    
    public void UpdateTourStatus(String name, String status)throws Exception;
    
    public void UpdateRoomStatus(String name, String status)throws Exception;

    public void resetTour(String roomName) throws Exception ;

    public void UpdateUserInTour(String tourName, int addedCount) throws Exception;
            
    public void deleteTournament(String tourName)throws Exception;
    
    public boolean createNewLevel(LevelDetailEntity level) throws Exception;
    public boolean updateLevel(LevelDetailEntity level) throws Exception;
    public boolean deleteLevel(int id) throws Exception;

    public ISFSArray getUserList(String name, int index, int numRow);

    public ISFSArray getRoomList(String name, int index, int numRow);
    
    public RoomInfo getRoomInfo(String name);

    public ISFSArray getTournamentList(String name, int index, int numRow);
    
    public ISFSArray getTournamentListWithSBBlind(String name, int index, int numRow);
    
    public ISFSArray getTournamentInfo(String name);
    
    public ISFSArray getListLevel(int levelType, int index, int numRow);
    
    public ISFSArray getListLevelCollection() ;

    public void changeRoomStatus(String roomName, String status);
    
    public ISFSArray getTransaction(String userName, String byAdmin, String fromDate, String toDate, int index, int numRow);
    
    public ArrayList<LevelDetailEntity> getLevelDetailByType(int levelType, int beginLevel, int endLevel);
}
